# dapp protectedDataSharing-dapp default pipeline
kind: pipeline
type: docker
name: dapp-default

trigger:
  event:
    exclude:
      - promote

steps:
  - name: only dapp package
    image: bash
    commands:
      - cp -r packages/dapp/. . && rm -rf packages

  - name: install
    image: node:14-alpine3.11
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: check version match [get scone fingerprint (prod)]
    image: node:18.19
    commands:
      - cd dapp
      - cat ../.drone.yml | grep "iexechub/protectedDataSharing-dapp:$(npm pkg get version | sed 's/"//g')-sconify-"

  - name: check-code-format
    image: node:14-alpine3.11
    commands:
      - npm run check-format

  # - name: lint
  #   image: node:18.19
  #   commands:
  #     - npm run lint

  - name: run-tests
    image: node:14-alpine3.11
    commands:
      - npm run test:silent

  - name: docker-publish-dry-run
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      dry_run: true
      dockerfile: ./Dockerfile
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/protectedDataSharing-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password

---
# dapp content-creator: build non-scone (non-tee) docker image & publish on docker-regis (dev)
kind: pipeline
type: docker
name: publish-dev-non-tee-docker-image
trigger:
  event:
    - promote
  target:
    - dapp-dev-non-tee
  branch:
    - develop
    - v2

steps:
  - name: only dapp package
    image: bash
    commands:
      - cp -r packages/dapp/. . && rm -rf packages

  - name: install-dependencies
    image: node:14-alpine3.11
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: check-code-format
    image: node:14-alpine3.11
    commands:
      - npm run check-format

  # - name: lint
  #   image: node:18.19
  #   commands:
  #     - npm run lint

  - name: run-tests
    image: node:14-alpine3.11
    commands:
      - npm run test:silent

  - name: publish-dev-non-tee-docker-image
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      dockerfile: ./Dockerfile
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/protectedDataSharing-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password
      tags:
        - dev
        - 'dev-${DRONE_COMMIT}'

---
# dapp content-creator: build non-scone (non-tee) docker image & publish on docker-regis (prod)
# /!\ every step must run in dapp/
kind: pipeline
type: docker
name: publish-prod-non-tee-docker-image

trigger:
  event:
    - promote
  target:
    - dapp-prod-non-tee
  branch:
    - v2
    - main

steps:
  - name: only dapp package
    image: bash
    commands:
      - cp -r packages/dapp/. . && rm -rf packages

  - name: install
    image: node:14-alpine3.11
    pull: always
    commands:
      - node -v
      - npm -v
      - npm ci

  - name: format
    image: node:14-alpine3.11
    commands:
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - npm run lint

  - name: run-tests
    image: node:14-alpine3.11
    commands:
      - npm run test:silent

  - name: extract-version-from-package
    image: node:18.19
    # generates the .tags file for the docker plugin
    commands:
      - npm pkg get version | sed 's/"//g' > ../.tags

  - name: publish-prod-non-tee-docker-image
    # plugin doc https://plugins.drone.io/plugins/docker and repo https://github.com/drone-plugins/drone-docker
    image: plugins/docker
    pull: always
    settings:
      context: ./dapp
      dockerfile: ./dapp/Dockerfile
      # tag comes from .tags file
      registry: docker-regis.iex.ec
      repo: docker-regis.iex.ec/product/protectedDataSharing-dapp
      pull_image: true
      username:
        from_secret: nexus-user
      password:
        from_secret: nexus-password

---
#pipeline to publish dapp contract on iexec
kind: pipeline
type: docker
name: deploy-dapp-contract

trigger:
  event:
    - promote
  target:
    - dapp-dev
    - dapp-prod
  branch:
    - develop
    - v2
    - main

steps:
  - name: only dapp package
    image: bash
    commands:
      - cp -r packages/dapp1/. . && cp -r packages/deployment-dapp/. . && rm -rf packages

  - name: get scone fingerprint (dev)
    image: iexechub/protectedDataSharing-dapp:dev-${DRONE_COMMIT}-sconify-5.7.5-v12-production
    commands:
      - SCONE_HASH=1 node > deployment-dapp/.scone-fingerprint
    when:
      target:
        - dapp-dev
      branch:
        - develop

  - name: get scone fingerprint (prod)
    # /!\: maintain the version here
    image: iexechub/protectedDataSharing-dapp:0.0.1-sconify-5.7.5-v12-production
    commands:
      - SCONE_HASH=1 node > deployment-dapp/.scone-fingerprint
    when:
      target:
        - dapp-prod
      branch:
        - main

  - name: format
    image: node:18.19
    commands:
      - npm run check-format

  - name: lint
    image: node:18.19
    commands:
      - cd dapp
      - npm run lint

  - name: install deps
    image: node:18.19
    pull: always
    commands:
      - cd dapp
      - npm ci
      - cd ../deployment-dapp
      - npm ci

  - name: deploy dapp contract
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run deploy-dapp

  - name: configure ENS
    image: node:18.19
    pull: always
    environment:
      DRONE_DEPLOY_TO: $DRONE_DEPLOY_TO
      WALLET_PRIVATE_KEY_DEV:
        from_secret: protectedDataSharing-dapp-dev-privatekey
      WALLET_PRIVATE_KEY_PROD:
        from_secret: protectedDataSharing-dapp-prod-privatekey
    commands:
      - cd deployment-dapp
      - npm run configure-ens
